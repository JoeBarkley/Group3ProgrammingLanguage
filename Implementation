(*For the statement list*)

M (  itree(inode("stmtList", _),
    [
      stmt1,
      itree(inode(";", _), []),
      stmtList1
    ]
  )
,
  m0) = let
        val m1 = M(stmt1, m0)
        val m2 = M(stmtList1, m1)
      in
      end

(*For the statement itself, where the root is statement, and the children are the various different statements that we can have*)

M (  itree(inode("stmt", _),

  [
    assignStmt,
    decStmt,
    condStmt,
    iterStmt,
    printStmt,
    decoratedId,

  ]

), m0) = let
					val m1 = M(stmt1, m0)
					val m2 = M(stmtList1, m1)
				in
					m2
				end



(*For the assignment statement, identifier = expression*)
M ( itree(inode("assignStmt", _),

    [
      identifier,
      itree(inod("=",_), []),
      expression1

    ]
), m0) =
let
  val (v, m1) 	= E’ (expression1, m0)
  val loc 		= getLoc (accessEnv(identifier, m1))
  val m2 		= updateStore (loc, v, m1)
in
  m2
end


(*For the assignment statement, int identifier = expression)

M (  itree (inode("assignStmt", _),
    [
      itree(inode("int",_),[]),
      identifier,
      itree(inode("=", _), []),
      expression1
    ]
), m0) =
	let
		val m1 		= updateEnv (identifier, int, new(), m0)
		val (v, m2) 	= E’ (expression1, m1)
		val loc 		= getLoc (accessEnv(identifier, m2))
		val m3 		= updateStore (loc, v, m2)
	in
		m3
	end

(*For the assignment statement, bool identifier = expression)
M (itree(inode("assignStmt", _),
  [
    itree(inode("bool", _), [])
    identifier,
    itree(inode("=", _), [])
    expression1
  ]

), m0) =
	let
		val m1 		= updateEnv (identifier, bool, new(), m0)
		val (v, m2) 	= E’ (expression1, m1)
		val loc 		= getLoc (accessEnv(identifier, m2))
		val m3 		= updateStore (loc, v, m2)
	in
    m3
  end

(*For the dec stmt, for int identifier*)
M (itree(inode("decStmt", _),

  [
    itree(inode("int", _), []),
    identifier

  ]

), m0) =
let
  val m1 = updateEnv (identifier, int, new(), m0)
  in
    m1
end


(*For the decStmt, where we declare a boolean data type*)

M (itree(inode("decStmt", _),
  [
    itree(inode("bool", _), []),
    identifier

  ]

), m0) =
let
  val m1 = updateEnv (identifier, bool, new(), m0)
in
  m1
end


(*Parse tree implementation for block*)
M ( itree(inode("block", _),
  [
    itree(inode("{", _), []),
    stmtList,
    itree(inode("}", _), []),

  ]

), (env0, s0) ) =	let
					val (env1, s1) 	= M( stmtList1, (env0, s0) )
					val m2		= (env0, s1)
				in
					m2
				end

(*Parse tree implementation for condStmt if (expression) block)

M (itree(inode("condStmt", _),
  [
    itree(inode("if", _), []),
    itree(inode("(", _), []),
    expression1,
    itree(inode(")", _), []),
    block1,

  ]
)
, m0) =
	let
		val (v, m1) = E’ (expression1, m0)
	in
		if v then M (block1, m1)
		else m1
	end

(*parse tree implementation for condStmt if (expression) block else block)

M (itree(inode("condStmt", _),
  [
    itree(inode("if", _), []),
    itree(inode("(", _), []),
    expression1,
    itree(inode(")", _), []),
    block1
    itree(inode("else", _), []),
    block,

  ]
), m0) =
	let
		val (v, m1) = E’ (expression1, m0)
	in
		if v then M (block1, m1)
		else m1
	end

(*Parse tree for while loop implementation*)
M (    itree(inode("whileLoop", _),
      [
        itree(inode("while", _), []),
        itree(inode("(", _), []),
        expression1,
        itree(inode(")", _), []),
        itree(inode("{", _), []),
        block1,
        itree(inode("}", _), []),

      ]

    )
, m0) =
	let
		val (v, m1) = E’ (expression1, m0)
	in
		if v then
			let
				val m2 = M (block1, m1)
				val m3 = M ([[while (expression1) block1]], m2)
			in
				m3
			end
		else
			m1
	end

(*Parse tree implementation for for loop implementation with assignStmt*)

M (itree(inode("forLoop", _),
      [

        itree(inode("for", _), []),
        itree(inode("(", _), []),
        assignStmt1,
        terminationStmt1,
        decoratedId1,
        itree(inode(")", _), []),
        block1,

      ]
), m0) =
	let
		val m1 = M (assignStmt1, m0)
		val m2 = N (terminationStmt1, decoratedId1, block1, m1)
	in
		m2
	end


(*Parse tree implementation for for loop without assignStmt*)
N (terminationStmt1, decoratedId1, block1, m0) =
	let
		val (v1, m1) = E’ (terminationStmt1, m0)
	in
		if v1 then
			let
				val (v2, m2) = E’ (decoratedId1, m1)
				val m3 = M (block, m2)
				val m4 = N (terminationStmt1, decoratedId1, block1, m3)
			in
				m4
			end
		else
			m1
	end


(*Parse tree implementation for terminationStmt*)
E’ (itree(inode("terminationStmt", _),
    [
      expression1,

    ]
), m) = E’ (expression1, m)

(*Parse tree implementation for printStmt*)
M (itree(inode("printStmt", _),
  [
     itree(inode("print", _), []),
     itree(inode("(", _), []),
     expresion1,
    itree(inode(")", _), []),

  ]

), m0) = let
					val (v, m1) = E’ (expression1, m0)
print(v)
   in
	  m1
  end

(*Below are the implementations for the decorated ID*)
E’ (itree(inode("decoratedID", _),
  [
    identifier,
    itree(inode("++", _), []),
  ]
)
, m0) = let
				val loc = getLoc(accessEnv(identifier, m0))
				val v1 = accessStore(loc, m0)
				val v2 = (v1 + 1)
				val m1 = updateStore(loc, v2, m0)
			     in
				(v1, m1)
			     end


E’ (itree(inode("decoratedID", _),
  [
    identifier,
    itree(inode("--", _), []),
  ]
), m0) = let
    val loc = getLoc(accessEnv(identifier, m0))
    val v1 = accessStore(loc, m0)
    val v2 = (v1 - 1)
    val m1 = updateStore(loc, v2, m0)
      in
        (v1, m1)
      end


E’ (itree(inode("decoratedID", _),
  [
    itree(inode("++", _), []),
    identifier,
  ]
), m0) = let
    val loc = getLoc(accessEnv(identifier, m0))
    val v1 = accessStore(loc, m0)
    val v2 = (v1 + 1)
    val m1 = updateStore(loc, v2, m0)
      in
      	(v2, m1)
      end

E’ (itree(inode("decoratedID", _),
  [
    itree(inode("--", _), []),
    identifier,
  ]
), m0) = let
	val loc = getLoc(accessEnv(identifier, m0))
  val v1 = accessStore(loc, m0)
  val v2 = (v1 - 1)
  val m1 = updateStore(loc, v2, m0)
    in
      (v2, m1)
    end


(*Parse tree code for expressions*)
E’ (itree(inode("expression", _),
  [
    logicalExp1

  ]

), m ) = E’ (logicalExp1, m)

E’ (itree(inode("logicalExpr", _),
  [
    logicalExpr1,
    itree(inode("or", _), []),
    logicalTerm1

  ]
), m0) = let
						val (v1, m1) = E’(logicalExp1, m0)
						val (v2, m2) = E’(logicalTerm1, m1)
					 in
						if v1 then (true, m2)
						else
            if v2 then (true, m2)
            else (false, m2)
          end

E’ (itree(inode("logicalTerm", _),
    [
      relationalExpr1
    ]

), m) 		          = E’ (relationalExp1, m)


E’ (itree(inode("relationalExp", _),
  [
    relationalExp1,
    itree(inode("==", _), []),
    arithmeticExp1

  ]


), m0) =
	let
		val (v1, m1) = E’ (relationalExp1, m0)
		val (v2, m2) = E‘ (arithmeticExp1, m1)
	in
		if v1 = v2 then (true, m2)
		else (false, m2)
	end


  E’ (itree(inode("relationalExp", _),
  [
    relationalExp1,
    itree(inode("!=", _), []),
    arithmeticExp1

  ]


), m0) =
  	let
  		val (v1, m1) = E’ (relationalExp1, m0)
  		val (v2, m2) = E’ (arithmeticExp1, m1)
  	in
  		if v1 <> v2 then (true, m2)
  		else (false, m2)
  	end

E’ (itree(inode("relationalExp", _),
  [
    relationalExp1,
    itree(inode(">", _), []),
    arithmeticExp1

  ]


), m0) =
    let
    	val (v1, m1) = E’ (relationalExp1, m0)
    	val (v2, m2) = E’ (arithmeticExp1, m1)
    in
    	if v1 > v2 then (true, m2)
    	else (false, m2)
    end


    E’ (itree(inode("relationalExp", _),
      [
        relationalExp1,
        itree(inode("<", _), []),
        arithmeticExp1

      ]


    ), m0) =
        let
        	val (v1, m1) = E’ (relationalExp1, m0)
        	val (v2, m2) = E’ (arithmeticExp1, m1)
        in
        	if v1 < v2 then (true, m2)
        	else (false, m2)
        end

E’ (itree(inode("relationalExp", _),
  [
    arithmeticExp1

  ]


), m0) = E’ (arithmeticExp1, m0)



E’ (itree(inode("arithmeticExp", _),
  [
    arithmeticExp1,
    itree(inode("+", _), []),
    arithmeticTerm1
  ]
), m0) = let
							val (v1, m1) = E’ (arithmeticExp1, m0)
							val (v2, m2) = E’ (arithmeticTerm1, m1)
						    in
							(v1 + v2, m2)
						    end

E’ (itree(inode("arithmeticExp", _),
  [
    arithmeticExp1,
    itree(inode("-", _), []),
    arithmeticTerm1
  ]
), m0) =
let
        val (v1, m1) = E’ (arithmeticExp1, m0)
        val (v2, m2) = E’ (arithmeticTerm1, m1)
in
        (v1 - v2, m2)
 end


 E’ (itree(inode("arithmeticExp", _),
  [
    arithmeticTerm1
  ]
)
    , m) 			= E’ (arithmeticTerm1, m)

E’ (itree(inode("arithmeticTerm", _),
  [
    arithmeticTerm1,
    itree(inode("*", _), []),
    arithmeticEntry1,
  ]
)
, m0) =
let
    	val (v1, m1) = E’ (arithmeticTerm1, m0)
    	val (v2, m2) = E’ (arithmeticEntry1, m1)
  in
    	(v1 * v2, m2)
  end


  E’ (itree(inode("arithmeticTerm", _),
  [
    arithmeticTerm1,
    itree(inode("/", _), []),
    arithmeticEntry1,
  ]
)
, m0) = let
  							val (v1, m1) = E’ (arithmeticTerm1, m0)
  							val (v2, m2) = E’ (arithmeticEntry1, m1)
  						      in
  							(v1 div v2, m2)
  						      end


E’ (itree(inode("arithmeticTerm", _),
  [
    arithmeticTerm1,
    itree(inode("%", _), []),
    arithmeticEntry1,
  ]
)
, m0) =
    let
					val (v1, m1) = E’ (arithmeticTerm1, m0)
          val (v2, m2) = E’ (arithmeticEntry1, m1)
    in
        (v1 mod v2, m2)
    end


E’ (itree(inode("arithmeticTerm", _),
  [
    arithmeticEntry1
  ]
), m) 			     = E’ (arithmeticEntry1, m)


E’ (itree(inode("arithmeticEntry", _),
  [
    itree(inode("-", _), []),
    exponentTerm1

  ]

)
 , m0)	=   let
					val (v1, m1) 	= E’ (exponentTerm1, m0)
				     in
					(~v1, m1)
				     end


E’ (itree(inode("arithmeticEntry", _),
  [
    itree(inode("not", _), []),
    exponentTerm1

  ]

), m0) = let
  val (v1, m1) = E’ (exponentTerm1, m0)
      in
        (not v1, m1)
      end


E’ (itree(inode("arithmeticEntry", _),
  [
    exponentTerm1

  ]

)
, m)     = E’(exponentTerm1, m)

E’ (itree(inode("exponentTerm", _),
  [
  baseTerm1,
  itree(inode("^", _), []),
  exponentTerm1
  ]

)
, m0) = let
						val (v1, m1) = E’ (exponentTerm1, m0)
						val (v2, m2) = E’ (baseTerm1, m1)
					         in
						(exp(v2, v1), m2)
					         end

E’ (itree(inode("exponentTerm", _),
  [
  baseTerm1,

  ]

)
, m) = E’ (baseTerm1, m)


E’ (itree(inode("baseTerm", _),
  [
    itree(inode("(", _), []),
    expression1,
    itree(inode(")", _), []),
  ]
)
, m) = E’(expression1, m)


E’ (itree(inode("baseTerm", _),
  [
    itree(inode("abs", _), []),
    itree(inode("(", _), []),
    expression1,
    itree(inode(")", _), []),
  ]
), m0) =
	let
		val (v1, m1) = E’ (expression1, m0)
	in
		if v1 < 0 then (~v1, m1)
		else (v1, m1)
	end


E’ (itree(inode("baseTerm", _),
  [
    identifier
  ]
), m) = 	let
  val loc 	= getLoc(accessEnv(identifier, m))
  val v 	= accessStore(loc, m)
           	in
  (v, m)
  end

E’ (itree(inode("baseTerm", _),
  [
    integer
  ]
), m)   = (integer, m)

E’ (itree(inode("baseTerm", _),
  [
    boolean
  ]
), m) = (boolean, m)

E’ (itree(inode("baseTerm", _),
  [
    decoratedId
  ]
), m) = E’ (decoratedId, m)
