(*#line 31.10 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*)(* ============================================================================================== *) 
datatype lexresult	= SHELL of string * string * {line: word, column: word};
val error 			= fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof 			= fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
		fun split(x, []   ) =  raise General.Fail("an_error")
		  | split(x, y::ys) = if x=y then ys else split(x,ys);
													
		fun splitFirst(symbol,[])    = 	[] (* symbol was not in the input list *)
		  | splitFirst(symbol,x::xs) = 	if x = symbol 
						then (* found split point *)
							[]
						else (* keep looking      *)
							x::splitFirst(symbol,xs);
																		
        val s0   = explode(yytext);
        val s1   = split(#"<",s0);
        val s2   = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
	
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 35.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\080\081\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\080\078\003\003\003\077\003\003\076\075\074\072\003\070\003\069\
\\068\066\066\066\066\066\066\066\066\066\003\065\059\057\055\003\
\\003\006\006\006\006\006\051\006\006\006\006\006\006\006\006\006\
\\006\006\006\006\047\006\006\006\006\006\006\044\003\003\043\003\
\\003\038\034\006\006\030\027\006\006\023\006\006\006\006\020\018\
\\013\006\006\006\006\006\006\008\006\006\006\005\003\004\003\003\
\\003"
),
 (6, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\009\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\010\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\011\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\012\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\014\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (14, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\015\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\016\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\017\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\019\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\021\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\022\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (23, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\026\007\007\007\007\007\007\007\024\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\025\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\028\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\029\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (30, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\031\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\032\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\033\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (34, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\035\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\036\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\037\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\041\007\007\007\007\007\007\007\007\007\007\007\039\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\040\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\042\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\045\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (45, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\048\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\049\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\050\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\052\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\053\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (53, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\007\007\007\007\007\007\007\007\007\007\000\000\000\000\000\000\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\000\000\000\000\007\
\\000\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\007\007\007\054\007\007\007\007\007\007\007\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\000\
\\000\060\060\060\060\060\060\060\060\060\060\060\060\060\060\060\
\\060\060\060\060\060\060\060\060\060\060\060\000\000\000\000\000\
\\000\060\060\060\060\060\060\060\060\060\060\060\060\060\060\060\
\\060\060\060\060\060\060\060\060\060\060\060\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\060\060\060\060\060\060\060\060\060\060\000\000\000\000\061\000\
\\000\060\060\060\060\060\060\060\060\060\060\060\060\060\060\060\
\\060\060\060\060\060\060\060\060\060\060\060\000\000\000\000\060\
\\000\060\060\060\060\060\060\060\060\060\060\060\060\060\060\060\
\\060\060\060\060\060\060\060\060\060\060\060\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\062\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\063\063\063\063\063\063\063\063\063\063\000\000\000\000\000\000\
\\000\063\063\063\063\063\063\063\063\063\063\063\063\063\063\063\
\\063\063\063\063\063\063\063\063\063\063\063\000\000\000\000\063\
\\000\063\063\063\063\063\063\063\063\063\063\063\063\063\063\063\
\\063\063\063\063\063\063\063\063\063\063\063\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\067\067\067\067\067\067\067\067\067\067\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (72, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\073\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (78, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (80, 
"\000\000\000\000\000\000\000\000\000\081\081\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\081\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 127)], trans = 0},
{fin = [(N 19),(N 127)], trans = 0},
{fin = [(N 17),(N 127)], trans = 0},
{fin = [(N 113),(N 127)], trans = 6},
{fin = [(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 8},
{fin = [(N 113)], trans = 9},
{fin = [(N 113)], trans = 10},
{fin = [(N 113)], trans = 11},
{fin = [(N 75),(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 13},
{fin = [(N 113)], trans = 14},
{fin = [(N 113)], trans = 15},
{fin = [(N 113)], trans = 16},
{fin = [(N 96),(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 18},
{fin = [(N 90),(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 20},
{fin = [(N 113)], trans = 21},
{fin = [(N 83),(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 23},
{fin = [(N 113)], trans = 24},
{fin = [(N 10),(N 113)], trans = 6},
{fin = [(N 64),(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 27},
{fin = [(N 113)], trans = 28},
{fin = [(N 79),(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 30},
{fin = [(N 113)], trans = 31},
{fin = [(N 113)], trans = 32},
{fin = [(N 69),(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 34},
{fin = [(N 113)], trans = 35},
{fin = [(N 113)], trans = 36},
{fin = [(N 15),(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 38},
{fin = [(N 113)], trans = 39},
{fin = [(N 87),(N 113)], trans = 6},
{fin = [(N 113)], trans = 41},
{fin = [(N 6),(N 113)], trans = 6},
{fin = [(N 45),(N 127)], trans = 0},
{fin = [(N 127)], trans = 44},
{fin = [], trans = 45},
{fin = [(N 125)], trans = 0},
{fin = [(N 113),(N 127)], trans = 47},
{fin = [(N 113)], trans = 48},
{fin = [(N 113)], trans = 49},
{fin = [(N 106),(N 113)], trans = 6},
{fin = [(N 113),(N 127)], trans = 51},
{fin = [(N 113)], trans = 52},
{fin = [(N 113)], trans = 53},
{fin = [(N 113)], trans = 49},
{fin = [(N 55),(N 127)], trans = 55},
{fin = [(N 61)], trans = 0},
{fin = [(N 27),(N 127)], trans = 57},
{fin = [(N 48)], trans = 0},
{fin = [(N 53),(N 127)], trans = 59},
{fin = [], trans = 60},
{fin = [], trans = 61},
{fin = [], trans = 62},
{fin = [(N 121)], trans = 62},
{fin = [(N 58)], trans = 0},
{fin = [(N 25),(N 127)], trans = 0},
{fin = [(N 110),(N 127)], trans = 66},
{fin = [(N 110)], trans = 66},
{fin = [(N 110),(N 127)], trans = 0},
{fin = [(N 37),(N 127)], trans = 0},
{fin = [(N 43),(N 127)], trans = 70},
{fin = [(N 33)], trans = 0},
{fin = [(N 41),(N 127)], trans = 72},
{fin = [(N 30)], trans = 0},
{fin = [(N 39),(N 127)], trans = 0},
{fin = [(N 23),(N 127)], trans = 0},
{fin = [(N 21),(N 127)], trans = 0},
{fin = [(N 35),(N 127)], trans = 0},
{fin = [(N 127)], trans = 78},
{fin = [(N 51)], trans = 0},
{fin = [(N 2),(N 127)], trans = 80},
{fin = [(N 2)], trans = 80}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  10 => let val yytext=yymktext() in (*#line 48.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 684.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 106 => let val yytext=yymktext() in (*#line 78.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL("boolean"    , yytext, getNextTokenPos(yytext))  (*#line 686.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 110 => let val yytext=yymktext() in (*#line 79.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL("integer"    , yytext, getNextTokenPos(yytext))  (*#line 688.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 113 => let val yytext=yymktext() in (*#line 80.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL("identifier" , yytext, getNextTokenPos(yytext))  (*#line 690.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 121 => let val yytext=yymktext() in (*#line 83.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(generateSchemaTokenName(yytext), yytext, getNextTokenPos(yytext))    (*#line 692.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 125 => let val yytext=yymktext() in (*#line 84.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL("" , yytext, getNextTokenPos(yytext))    (*#line 694.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 127 => let val yytext=yymktext() in (*#line 86.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) error("ignored an unprintable character: " ^ yytext); getNextTokenPos(yytext); lex()  (*#line 696.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 15 => let val yytext=yymktext() in (*#line 49.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 698.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 17 => let val yytext=yymktext() in (*#line 50.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 700.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 19 => let val yytext=yymktext() in (*#line 51.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 702.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 2 => let val yytext=yymktext() in (*#line 46.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 704.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 21 => let val yytext=yymktext() in (*#line 52.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 706.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 23 => let val yytext=yymktext() in (*#line 53.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 708.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 25 => let val yytext=yymktext() in (*#line 54.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 710.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 27 => let val yytext=yymktext() in (*#line 55.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 712.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 30 => let val yytext=yymktext() in (*#line 56.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 714.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 33 => let val yytext=yymktext() in (*#line 57.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 716.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 35 => let val yytext=yymktext() in (*#line 58.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 718.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 37 => let val yytext=yymktext() in (*#line 59.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 720.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 39 => let val yytext=yymktext() in (*#line 60.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 722.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 41 => let val yytext=yymktext() in (*#line 61.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 724.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 43 => let val yytext=yymktext() in (*#line 62.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 726.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 45 => let val yytext=yymktext() in (*#line 63.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 728.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 48 => let val yytext=yymktext() in (*#line 64.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 730.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 51 => let val yytext=yymktext() in (*#line 65.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 732.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 53 => let val yytext=yymktext() in (*#line 66.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 734.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 55 => let val yytext=yymktext() in (*#line 67.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 736.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 58 => let val yytext=yymktext() in (*#line 68.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 738.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 6 => let val yytext=yymktext() in (*#line 47.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 740.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 61 => let val yytext=yymktext() in (*#line 69.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 742.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 64 => let val yytext=yymktext() in (*#line 70.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 744.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 69 => let val yytext=yymktext() in (*#line 71.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 746.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 75 => let val yytext=yymktext() in (*#line 72.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 748.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 79 => let val yytext=yymktext() in (*#line 73.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 750.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 83 => let val yytext=yymktext() in (*#line 74.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 752.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 87 => let val yytext=yymktext() in (*#line 75.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 754.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 90 => let val yytext=yymktext() in (*#line 76.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 756.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| 96 => let val yytext=yymktext() in (*#line 77.21 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec"*) SHELL(yytext       , yytext, getNextTokenPos(yytext))  (*#line 758.1 "C:\Users\cmcgr\Documents\lang\Milestone4\Group3ProgrammingLanguage\Group3ProgrammingLanguage\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
